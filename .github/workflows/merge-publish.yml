name: Build and Publish on merge master

on:
  push:
    branches:
      - master

jobs:
  check-label:
    runs-on: ubuntu-latest
    outputs:
      skip_ci: ${{ steps.skip_ci.outputs.value }}
    steps:
      - name: Get PR Number
        id: pr_number
        run: |
          PR_NUM=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/pulls \
            | jq '.[0].number')
          echo "value=$PR_NUM" >> $GITHUB_OUTPUT

      - name: Get PR Labels
        if: steps.pr_number.outputs.value != 'null'
        id: pr_labels
        run: |
          echo "Fetching labels for pr #${{ steps.pr_number.outputs.value}}"
          LABELS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  "https://api.github.com/repos/${{ github.repository }}/issues/${{ steps.pr_number.outputs.value }}/labels" \
                  | jq -r '.[].name')
          echo "value=$LABELS" >> $GITHUB_OUTPUT

      - name: Check for 'skip_ci' Label
        id: skip_ci
        run: |
          if [ "${{ steps.pr_number.outputs.value }}" == "null" ]; then
            echo "value=true" >> $GITHUB_OUTPUT
          fi
          if [ "${{ steps.pr_labels.outputs.value }}" == "skip_ci" ]; then
            echo "value=true" >> $GITHUB_OUTPUT
            echo "skip_ci label found, abort ci."
          fi

  build-packages:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: check-label
    if: needs.check-label.outputs.skip_ci != 'true'
    outputs:
      skip_ci: ${{ needs.check-label.outputs.skip_ci }}
      check_config: ${{ steps.check_config.outputs.modified }}
      check_rule: ${{ steps.check_rule.outputs.modified }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Install Dependencies & Cleanup dist
        id: last_commit
        run: |
          echo "sha=$(git rev-parse HEAD~1)" >> $GITHUB_OUTPUT
          rm -rf ./.npmrc
          npm install
          npm run clean

      # ========================================

      - name: Check for changes in packages/config
        id: check_config
        run: echo "modified=$(git diff --name-only ${{ steps.last_commit.outputs.sha }} ${{ github.sha }} -- packages/config | wc -l)" >> $GITHUB_OUTPUT

      - name: Check for changes in packages/rule
        id: check_rule
        run: echo "modified=$(git diff --name-only ${{ steps.last_commit.outputs.sha }} ${{ github.sha }} -- packages/rule | wc -l)" >> $GITHUB_OUTPUT

      - name: Cache dist
        if: steps.check_config.outputs.modified != '0' || steps.check_rule.outputs.modified != '0'
        uses: actions/cache@v3
        with:
          path: dist
          key: eslint-jshow-${{ github.sha }}
          expire-in: 1d

      - name: Build packages/config
        if: steps.check_config.outputs.modified != '0'
        id: build_config
        run: |
          cd packages/config
          npm version patch --no-git-tag-version
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          cd ../..
          npm run build:config

      - name: Build packages/rule
        if: steps.check_rule.outputs.modified != '0'
        id: build_rule
        run: |
          cd packages/rule
          npm version patch --no-git-tag-version
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          cd ../..
          npm run build:rule

      # ========================================

      - name: Check & Build commit message
        if: steps.check_config.outputs.modified != '0' || steps.check_rule.outputs.modified != '0'
        id: build_commit
        run: |
          git status -s
          COMMIT_MSG=""
          if [ "${{ steps.build_config.outputs.version }}" != "" ]; then
            COMMIT_MSG="$COMMIT_MSG\n- eslint-config-jshow ${{ steps.build_config.outputs.version }}"
          fi
          if [ "${{ steps.build_rule.outputs.version }}" != "" ]; then
            COMMIT_MSG="$COMMIT_MSG\n- eslint-plugin-jshow ${{ steps.build_rule.outputs.version }}"
          fi
          if [ "$COMMIT_MSG" != "" ]; then
            COMMIT_MSG="chore: upgrade packages\n$COMMIT_MSG"
          fi
          echo "message=$COMMIT_MSG" >> $GITHUB_OUTPUT

      - name: Upgrade commit
        if: steps.build_commit.outputs.message != ''
        run: |
          git config --local user.email "dev@jshow.org"
          git config --local user.name "jShow"
          git restore ./.npmrc
          git add .
          echo -e "${{ steps.build_commit.outputs.message }}" | git commit -F -
          git pull --rebase
          git push "https://${{ github.actor }}:${{ secrets.GIT_TOKEN }}@github.com/${{ github.repository }}.git"

  publish-packages:
    runs-on: ubuntu-latest
    needs: build-packages
    if: needs.build-packages.outputs.skip_ci != 'true'
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      # ========================================

      - name: Restore cache
        if: needs.build-packages.outputs.check_config != '0' || needs.build-packages.outputs.check_rule != '0'
        uses: actions/cache@v3
        with:
          path: dist
          key: eslint-jshow-${{ github.sha }}

      - name: Publish eslint-config-jshow
        if: needs.build-packages.outputs.check_config != '0'
        run: |
          cd dist/eslint-config-jshow
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish eslint-plugin-jshow
        if: needs.build-packages.outputs.check_rule != '0'
        run: |
          cd dist/eslint-plugin-jshow
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
